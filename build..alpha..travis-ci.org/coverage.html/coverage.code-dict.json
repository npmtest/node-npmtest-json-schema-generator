{"/home/travis/build/npmtest/node-npmtest-json-schema-generator/test.js":"/* istanbul instrument in package npmtest_json_schema_generator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-json-schema-generator/lib.npmtest_json_schema_generator.js":"/* istanbul instrument in package npmtest_json_schema_generator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_json_schema_generator = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_json_schema_generator = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-json-schema-generator/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-json-schema-generator && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_json_schema_generator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_json_schema_generator\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_json_schema_generator.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_json_schema_generator.rollup.js'] =\n            local.assetsDict['/assets.npmtest_json_schema_generator.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_json_schema_generator.__dirname + '/lib.npmtest_json_schema_generator.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-json-schema-generator/node_modules/json-schema-generator/index.js":"module.exports = require('./lib/index');","/home/travis/build/npmtest/node-npmtest-json-schema-generator/node_modules/json-schema-generator/lib/index.js":"'use strict';\n\nvar Compiler = require('./compiler');\nvar AST = require('./ast.js');\nvar utils = require('./utils');\n\nvar jsonToSchema = function(json) {\n  var compiler = new Compiler();\n  var ast = new AST();\n  ast.build(json);\n  compiler.compile(ast.tree);\n  return compiler.schema;\n};\n\nmodule.exports = jsonToSchema;\n","/home/travis/build/npmtest/node-npmtest-json-schema-generator/node_modules/json-schema-generator/lib/compiler.js":"'use strict';\n\nvar utils = require('./utils');\n\n/**\nSchema generator using a AST\ntree.\n\n@class Compiler\n*/\nvar Compiler = function() {\n  if (!this instanceof Compiler) {\n    return new Compiler();\n  }\n\n  this.schema = {};\n};\n\n/**\nGenerates a JSON schema based on the provided AST tree.\n\n@method generate\n@param {Object} tree AST\n@param {Object} schema The schema object\n@param {Object} parent Schema node parent object\n@return void\n*/\nCompiler.prototype.generate = function(tree, schema, parent) {\n  for (var i in tree.children) {\n    var child = tree.children[i];\n    if (child.type === 'object') {\n      if (utils.isArray(parent.required)) {\n        parent.required.push(i);\n      }\n      schema[i] = {\n        type: 'object'\n        ,properties: {}\n        ,required: []\n      };\n      this.generate(child, schema[i].properties, schema[i]);\n    } else if (child.type === 'array') {\n      if (utils.isArray(parent.required)) {\n        parent.required.push(i);\n      }\n      schema[i] = {\n        type: 'array'\n        ,uniqueItems: child.uniqueItems\n        ,minItems: child.minItems\n        ,items: {\n          required:[]\n          ,properties: {}\n        }\n      }\n      this.generate(child, schema[i].items.properties, schema[i]);\n    } else {\n      schema[i] = {};\n      if (child.type) {\n        schema[i].type = child.type;\n      }\n\n      if (child.minLength) { \n        schema[i].minLength = child.minLength;\n      }\n\n      if (child.required) {\n        if (parent.items && utils.isArray(parent.items.required)) {\n          parent.items.required.push(i);\n        } else {\n          parent.required.push(i);\n        }\n      }\n    }\n  }\n};\n\n/**\nInitates compiling the given AST into a\nJSON schema.\n\n@method compile\n@param {Object} tree AST object\n@return void\n*/\nCompiler.prototype.compile = function(tree) {\n  if (tree.type === 'object') {\n   this.schema = {\n    '$schema': 'http://json-schema.org/draft-04/schema#'\n    ,description: ''\n    ,type: 'object'\n    ,properties: {}\n    ,required: []\n   };\n   this.generate(tree, this.schema.properties, this.schema);\n  } else {\n    this.schema = {\n      type: 'array'\n      ,'$schema': 'http://json-schema.org/draft-04/schema#'\n      ,'description': ''\n      ,minItems: 1\n      ,uniqueItems: true\n      ,items: {\n        type: 'object'\n        ,required: []\n        ,properties: {}\n      }\n    };\n\n    this.generate(tree, this.schema.items.properties, this.schema.items);\n  }\n};\n\nmodule.exports = Compiler;","/home/travis/build/npmtest/node-npmtest-json-schema-generator/node_modules/json-schema-generator/lib/utils.js":"'use strict';\n\nexports.isObject = function(value) {\n  return (null !== value && typeof value === typeof {} && !exports.isArray(value));\n};\n\nexports.isNumber = function(value) {\n  return !exports.isArray( value ) && (value - parseFloat( value ) + 1) >= 0;\n};\n\nexports.isArray = function(value) {\n  return (value instanceof Array);\n};\n\nexports.isString = function(value) {\n  return (typeof value === typeof '');\n};\n\nexports.isNull = function(value) {\n  return (null === value);\n};\n\nexports.isBoolean = function(value) {\n  return (value === true || value === false);\n};\n\nexports.toObject = function(arr) {\n  var rv = {};\n  for (var i = 0; i < arr.length; ++i)\n    rv[i] = arr[i];\n  return rv;\n};\n\nexports.oneIsNull = function(v1, v2) {\n  return ((v1 === null && v2 !== null) || (v1 !== null && v2 === null));\n};\n\nexports.isUndefined = function(val) {\n  return (null === val || typeof val === 'undefined');\n};\n\nexports.isFunction = function(fn) {\n  return (typeof fn === 'function');\n};\n\nexports.isEqual = function(v1, v2) {\n  if (typeof v1 !== typeof v2 || exports.oneIsNull(v1, v2)) {\n    return false;\n  }\n\n  if (typeof v1 === typeof \"\" || typeof v1 === typeof 0) {\n    return v1 === v2;\n  }\n\n  var _isEqual = true;\n\n  if (typeof v1 === typeof {}) {\n    var compare = function(value1, value2) {\n      for (var i in value1) {\n        if (!value2.hasOwnProperty(i)) {\n          _isEqual = false;\n          break;\n        }\n\n        if (exports.isObject(value1[i])) {\n          compare(value1[i], value2[i]);\n        } else if (typeof value1[i] === typeof \"\") {\n          if (value1[i] !== value2[i]) {\n            _isEqual = false;\n            break;\n          }\n        }\n      }\n    }\n\n    compare(v1, v2);\n  }\n\n  return _isEqual;\n};\n\nexports.getType = function(data) {\n  if (exports.isObject(data)) {\n    return 'object';\n  } else if (exports.isArray(data)) {\n    return 'array';\n  } else if (exports.isNull(data)) {\n    return null;\n  } else if (exports.isBoolean(data)) {\n    return 'boolean';\n  } else if (exports.isString(data)) {\n    return 'string';\n  } else if (exports.isNumber(data)) {\n    return 'number';\n  }\n};","/home/travis/build/npmtest/node-npmtest-json-schema-generator/node_modules/json-schema-generator/lib/ast.js":"'use strict';\n\n/**\nGenerates an Abstract Syntax Tree\nused for generating the schema.\n\n@see: https://en.wikipedia.org/wiki/Abstract_syntax_tree\n*/\nvar utils = require('./utils');\nvar crypto = require('crypto');\n\n/**\nAbstract Syntax Tree Class\n\n@class AST\n@return {Object}\n*/\nvar AST = function() {\n  if (!this instanceof AST) {\n    return new AST();\n  }\n\n  this.tree = {};\n};\n\n/**\nComputes the hex hash of the given value\n\n@method generateHash\n@param {Mixed} value Value to hash\n@return {String} HEX value.\n*/\nAST.prototype.generateHash = function(value) {\n if (utils.isObject(value)) {\n    var keys = Object.keys(value);\n    return crypto.createHash(\"md5\").update(JSON.stringify(keys)).digest(\"hex\");\n  } else if (utils.Array(value)) {\n    return crypto.createHash(\"md5\").update(JSON.stringify(value)).digest(\"hex\");\n  } else {\n    return crypto.createHash(\"md5\").update(value).digest(\"hex\");\n  }\n};\n\n/**\nChecks if the elements in the given node are all\nequal. \n\n@method isAllSimilarObject\n@param {Object} node JSON node to inspect\n@return {Object}\n*/\nAST.prototype.isAllSimilarObjects = function(node) {\n  var hashes = [];\n  var max = 0;\n  var selected = null;\n  for (var i in node) {\n    var hash = this.generateHash(node[i]);\n    hashes[hash] = true;\n    var keys = Object.keys(node[i]);\n    if (!max || keys.length > max) {\n      max = keys.length;\n      selected = node[i];\n    }\n  }\n\n  return {same: (hashes.length === 1), selected: selected};\n}\n\n/**\nInspect primitatives and apply the correct type\nand mark as required if the element contains a value.\n\n@method buildPrimitive\n@param {Object} tree Schema which represents the node\n@param {Node} node The JSON node being inspected\n@return void\n*/\nAST.prototype.buildPrimitive = function(tree, node) {\n  tree.type = utils.getType(node);\n  if (tree.type === 'string') {\n    tree.minLength = (node.length > 0) ? 1 : 0;\n  } \n\n  if (node !== null && typeof node !== 'undefined') {\n    tree.required = true;\n  }\n}\n\n/**\nInspect object properties and apply the correct\ntype and mark as required if the element has set \nproperties.\n\n@method buildObject\n@param {Object} tree Schema which represents the node\n@param {Node} node The JSON node being inspected\n*/\nAST.prototype.buildObjectTree = function(tree, node) {\n  tree.type = tree.type || 'object';\n  tree.children = tree.children || {};\n  for (var i in node) {\n    if (utils.isObject(node[i])) {\n      tree.children[i] = {};\n      this.buildObjectTree(tree.children[i], node[i]);\n      continue;\n    } else if (utils.isArray(node[i])) {\n      tree.children[i] = {};\n      this.buildArrayTree(tree.children[i], node[i]);\n    } else {\n      tree.children[i] = {};\n      this.buildPrimitive(tree.children[i], node[i]);\n    } \n  }\n};\n\n/**\nInspect array elements apply the correct\ntype and mark as required if the element has \nset properties.\n\n@method buildObject\n@param {Object} tree Schema which represents the node\n@param {Node} node The JSON node being inspected\n*/\nAST.prototype.buildArrayTree = function(tree, node) {\n  tree.type = 'array';\n  tree.children = {};\n  var first = node[0];\n  if (utils.isObject(first)) {\n    var similar = this.isAllSimilarObjects(node);\n    if (this.isAllSimilarObjects(node)) {\n      tree.uniqueItems = true;\n      tree.minItems = 1;\n\n      return this.buildObjectTree(tree, similar.selected);\n    }\n  };\n\n  for (var i=0; i<node.length; i++) {\n    if (utils.isObject(node[i])) {\n      tree.children[i] = {};\n      tree.children[i].type = 'object';\n      var keys = Object.keys(node[i]);\n      if (keys.length > 0) {\n        tree.children[i].required = true;\n      }\n      this.buildObjectTree(tree.children[i], node[i]);\n    } else if (utils.isArray(node[i])) {\n      tree.children[i] = {};\n      tree.children[i].type = 'array';\n      tree.children[i].uniqueItems = true;\n      if (node[i].length > 0) {\n        tree.children[i].required = true;\n      }\n      this.buildArrayTree(tree.children[i], node[i]);\n    } else {\n      if (tree.type === 'object') {\n        tree.children[i] = {};\n        this.buildPrimitive(tree.children[i], node[i]);\n      }\n    }\n  }\n};\n\n/**\nInitiates generating the AST from the \ngiven JSON document.\n\n@param {Object} json JSON object\n@return void\n*/\nAST.prototype.build = function(json) {\n  if (json instanceof Array) {\n    this.buildArrayTree(this.tree, json);\n  } else {\n    this.buildObjectTree(this.tree, json);\n  }\n};\n\nmodule.exports = AST;","/home/travis/build/npmtest/node-npmtest-json-schema-generator/node_modules/json-schema-generator/gulpfile.js":"var markdox = require(\"gulp-markdox\");\nvar gulp = require('gulp');\nvar mocha = require('gulp-mocha');\nvar concat = require(\"gulp-concat\");\nvar Stubby = require('node-stubby-server-cli').CLI;\nvar Events = Stubby.Events;\nvar path = require('path');\nvar stubbyHelper = require(path.normalize(__dirname + '/test/helpers/stubby-cli'));\n\n\n\ngulp.task('start:stubby', function(next) {\n  var cli = new Stubby();\n  cli.admin(stubbyHelper.ports.admin)\n    .stubs(stubbyHelper.ports.stubs)\n    .tls(stubbyHelper.ports.tls)\n    .data(path.normalize(__dirname + '/test/fixtures/stubby/routes.json'))\n    .unmute()\n\n  cli.once('LISTENING', function() {\n    next();\n  }).start();\n});\n\n\ngulp.task('test', ['start:stubby'], function() {\n  return gulp.src('test/**/*-test.js')\n    .pipe(mocha({reporter: 'nyan'}))\n    .once('error', function(e) {\n      process.exit(1);\n    })\n    .once('end', function() {\n      process.exit(0)\n    });\n});\n\n\ngulp.task('stop:stubby', ['test'], function(next) {\n  cli.kill();\n  next();\n});\n\n\ngulp.task(\"doc\", function(){\n  gulp.src(\"./lib/*.js\")\n    .pipe(markdox())\n    .pipe(concat(\"README.md\"))\n    .pipe(gulp.dest(\"./doc\"));\n});\n\n\n// Default tasks to run\ngulp.task('default', [\n  'start:stubby',\n  'test',\n  'stop:stubby',\n  'doc'\n]);"}